#!/usr/bin/env python3

"""Navigates to a child commit."""

import argparse
import os
import subprocess
import sys

import gitutils


def ellipsize(s, width):
    """Truncates a string to the specified maximum width.

    The maximum width includes the ellipsis added if the string is truncated.

    Unlike `textwrap.shorten`, leaves whitespace alone.
    """
    if len(s) <= width:
        return s

    ellipsis = "..."
    s = s[: (width - len(ellipsis))] + ellipsis
    assert(len(s) == width)
    return s


def prompt_for_child(children_hashes):
    """Prompts the user to choose a child commit."""
    instructions = ["There are multiple children:"]
    for i in range(len(children_hashes)):
        commit_summary \
            = gitutils.summarize_git_commit(children_hashes[i],
                                            f"    {i}: %h %s")
        instructions.append(ellipsize(commit_summary, width=79))
    instructions.append("")
    instructions = "\n".join(instructions)
    print(instructions)

    max_index = len(children_hashes) - 1
    prompt = f"Enter the child index [0..{max_index}]: "

    while True:
        try:
            choice = input(prompt).strip()
        except EOFError:
            print()
            raise gitutils.AbortError(cancelled=True)

        if not choice:
            continue
        elif choice.lower() in ("?", "help"):
            print()
            print(instructions)
            continue
        elif choice.lower() in ("q", "quit"):
            raise gitutils.AbortError(cancelled=True)
        try:
            index = int(choice)
            if 0 <= index <= max_index:
                return children_hashes[index]

            print(f"{choice} is not in the range [0..{max_index}].")
        except ValueError as e:
            print(f"\"{choice}\" is not a valid index.")
        print()


def main(argv):
    try:
        ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
        ap.add_argument("-h", "--help", action="help",
                        help="Show this help message and exit.")
        ap.add_argument("--verbose", action="store_true",
                        help="Print verbose debugging messages.")

        args = ap.parse_args(argv[1:])

        gitutils.verbose = args.verbose

        commit_graph = gitutils.git_commit_graph()
        head_hash = gitutils.git_commit_hash("HEAD")

        def head_hash_short():
            return gitutils.git_commit_hash(head_hash, short=True)

        children_hashes = commit_graph.get(head_hash)
        if not children_hashes:
            raise gitutils.AbortError(f"Could not find a child commit for "
                                      f"{head_hash_short()}")

        if len(children_hashes) == 1:
            selected_child_hash = children_hashes[0]
        else:
            selected_child_hash = prompt_for_child(children_hashes)

        return gitutils.run_command(
            ("git", "checkout", "--detach", selected_child_hash),
            bufsize=1).returncode

    except gitutils.AbortError as e:
        if not e.cancelled:
            print(f"{__name__}: {e}", file=sys.stderr)
        return e.exit_code


if __name__ == "__main__":
    __name__ = os.path.basename(__file__)

    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        sys.exit(1)
