#!/usr/bin/env python3

"""Navigates to a child commit."""

import argparse
import math
import os
import shutil
import sys

import gitutils


def terminal_size():
    """
    Returns the terminal size.

    Returns (inf, inf) if stdout is not a TTY.
    """
    if not sys.stdout.isatty():
        return os.terminal_size((math.inf, math.inf))
    return shutil.get_terminal_size()


def ellipsize(s, width):
    """
    Truncates a string to the specified maximum width.

    The maximum width includes the ellipsis added if the string is truncated.

    Unlike `textwrap.shorten`, leaves whitespace alone.
    """
    if len(s) <= width:
        return s

    ellipsis = "..."
    s = s[: (width - len(ellipsis))] + ellipsis
    assert len(s) == width
    return s


def prompt_for_child(children_hashes):
    """Prompts the user to choose a child commit."""
    instructions = ["There are multiple children:"]

    max_length = terminal_size().columns - 1
    for (i, child_hash) in enumerate(children_hashes):
        commit_summary = gitutils.summarize_git_commit(child_hash,
                                                       f"    {i}: %h %s")
        instructions.append(ellipsize(commit_summary, width=max_length))
    # Dummy element to get a final newline.
    instructions.append("")
    instructions = "\n".join(instructions)
    print(instructions)

    max_index = len(children_hashes) - 1
    prompt = f"Enter the child index [0..{max_index}]: "

    while True:
        try:
            choice = input(prompt).strip()
        except EOFError:
            print()
            raise gitutils.AbortError(cancelled=True)

        if not choice:
            continue

        if choice.lower() in ("?", "help"):
            print()
            print(instructions)
            continue

        if choice.lower() in ("q", "quit"):
            raise gitutils.AbortError(cancelled=True)

        try:
            index = int(choice)
            if 0 <= index <= max_index:
                return children_hashes[index]

            print(f"{choice} is not in the range [0..{max_index}].")
        except ValueError:
            print(f"\"{choice}\" is not a valid index.")
        print()


@gitutils.entrypoint(globals())
def main(argv):
    ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--verbose", action="store_true",
                    help="Print verbose debugging messages.")

    args = ap.parse_args(argv[1:])

    gitutils.verbose = args.verbose

    commit_graph = gitutils.git_commit_graph()
    head_hash = gitutils.git_commit_hash("HEAD")

    children_hashes = commit_graph.get(head_hash)
    if not children_hashes:
        head_hash_short = gitutils.git_commit_hash(head_hash, short=True)
        raise gitutils.AbortError(f"Could not find a child commit for "
                                  f"{head_hash_short}")

    if len(children_hashes) == 1:
        selected_child_hash = children_hashes[0]
    else:
        selected_child_hash = prompt_for_child(children_hashes)

    return gitutils.run_command(
        ("git", "checkout", "--detach", selected_child_hash),
        bufsize=1).returncode


if __name__ == "__main__":
    __name__ = os.path.basename(__file__)  # pylint: disable=redefined-builtin

    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        sys.exit(1)
