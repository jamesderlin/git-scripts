#!/usr/bin/env python3

"""
A friendlier wrapper for `git rebase`.
"""

import functools
import optparse
import sys

import gitutils


@functools.lru_cache(1)
def memoized_current_branch():
    """A memoized wrapper around `gitutils.current_git_branch`."""
    return gitutils.current_git_branch()


_epilog = """\

Positional arguments:
  COMMIT::COMMIT  The inclusive range of commits to reparent.  All commits
                  between and including the specified commits will be
                  reparented.  Endpoints may be specified in either order.
                  If either endpoint is unspecified, the current branch will
                  be used.

A note on syntax:
  The `COMMIT::COMMIT` syntax for specifying a commit range with inclusive
  endpoints is borrowed from Mercurial.  Although Mercurial also supports
  using `COMMIT..COMMIT` to specify closed intervals, Git already uses that
  syntax to specify half-open intervals.
"""


@gitutils.entrypoint
def main(argv):
    parser = optparse.OptionParser(
        description=__doc__.strip(),
        usage="%prog [OPTIONS] [--] COMMIT::COMMIT",
        add_help_option=False,
    )
    parser.disable_interspersed_args()

    parser.add_option("-h", "--help", action="store_true",
                      help="Show this help message and exit.")
    parser.add_option("--verbose", action="store_true",
                      help="Print verbose debugging messages.")
    parser.add_option("--dest", default="HEAD",
                      help="The destination commit.  This will become the "
                           "new parent commit of the reparented range.  "
                           "Defaults to `HEAD`.")

    passthrough_options = {
        ("-i", "--interactive"): None,
        ("--update-refs", "--no-update-refs"): None,
    }

    passthrough_group = optparse.OptionGroup(
        parser,
        "Options passed through to `git rebase`",
        "(See `git help rebase` for details about these options.)",
    )

    gitutils.add_passthrough_options(passthrough_group, passthrough_options,
                                     dest="rebase_options")
    parser.add_option_group(passthrough_group)

    (opts, args) = parser.parse_args(argv[1:])

    if opts.help:
        parser.print_help()
        print(_epilog)
        return 0

    gitutils.expect_positional_args(parser, args, min=1, max=1)
    rev_range = args.pop(0)

    gitutils.verbose = opts.verbose
    rebase_range = (rev_range.split("::")
                    if "::" in rev_range
                    else rev_range.split(".."))
    if len(rebase_range) != 2:
        raise gitutils.AbortError(f"Invalid commit range: {rev_range}")

    # Use `gitutils.git_commit_hash` judiciously since the commits might
    # specify branch names that we'll want to pass directly to `git rebase`.
    rebase_range = [(i or memoized_current_branch()) for i in rebase_range]

    if not gitutils.is_git_ancestor(rebase_range[0], rebase_range[1]):
        # Swap and try again.
        (rebase_range[0], rebase_range[1]) \
            = (rebase_range[1], rebase_range[0])

        if not gitutils.is_git_ancestor(rebase_range[0], rebase_range[1]):
            raise gitutils.AbortError(
                "Commit range does not specify an ancestor and descendant: "
                f"{rev_range}")

    # `git rebase` uses an exclusive endpoint, so adjust by one commit.
    #
    # We don't need to preserve a branch name for this endpoint, so obtaining
    # the commit hash here is safe.
    rebase_range[0] = gitutils.git_commit_hash(rebase_range[0]) + "~"

    rebase_options = opts.rebase_options or ()
    command = ("git", "rebase", *rebase_options, "--onto", opts.dest, "--",
               *rebase_range)
    return gitutils.run_command(command).returncode


if __name__ == "__main__":
    sys.exit(main(sys.argv))
