#!/usr/bin/env python3

"""
A friendlier wrapper for `git rebase`.
"""

import argparse
import functools
import os
import sys

import gitutils


@functools.lru_cache(1)
def memoized_current_branch():
    """A memoized wrapper around `gitutils.current_git_branch`."""
    return gitutils.current_git_branch()


@gitutils.entrypoint(globals())
def main(argv):
    git_rebase_help = "See `git help rebase`."

    ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--verbose", action="store_true",
                    help="Print verbose debugging messages.")
    ap.add_argument("--dest", default="HEAD",
                    help="The destination commit.  This will become the "
                         "new parent commit of the reparented range.  "
                         "Defaults to `HEAD`.")
    ap.add_argument("-i", "--interactive", dest="rebase_options", nargs=0,
                    action=gitutils.PassThroughOption,
                    help=git_rebase_help)
    ap.add_argument("range", metavar="COMMIT..COMMIT",
                    help="The inclusive range of commits to reparent.  "
                         "All commits between and including the specified "
                         "commits will be reparented.  Endpoints may be "
                         "specified in either order.  If either endpoint "
                         "is unspecified, the current branch will be used.")

    args = ap.parse_args(argv[1:])

    gitutils.verbose = args.verbose
    rebase_range = args.range.split("..")
    if len(rebase_range) != 2:
        raise gitutils.AbortError(f"Invalid commit range: {args.range}")

    # Use `gitutils.git_commit_hash` judiciously since the commits might
    # specify branch names that we'll want to pass directly to `git rebase`.
    rebase_range = [(i or memoized_current_branch()) for i in rebase_range]

    if not gitutils.is_git_ancestor(rebase_range[0], rebase_range[1]):
        # Swap and try again.
        (rebase_range[0], rebase_range[1]) \
            = (rebase_range[1], rebase_range[0])

        if not gitutils.is_git_ancestor(rebase_range[0], rebase_range[1]):
            raise gitutils.AbortError(
                "Commit range does not specify an ancestor and descendant: "
                f"{args.range}")

    # `git rebase` uses an exclusive endpoint, so adjust by one commit.
    #
    # We don't need to preserve a branch name for this endpoint, so obtaining
    # the commit hash here is safe.
    rebase_range[0] = gitutils.git_commit_hash(rebase_range[0]) + "~"

    rebase_options = args.rebase_options or ()
    command = ("git", "rebase", *rebase_options, "--onto", args.dest, "--",
               *rebase_range)
    return gitutils.run_command(command, bufsize=1).returncode


if __name__ == "__main__":
    __name__ = os.path.basename(__file__)  # pylint: disable=redefined-builtin

    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        sys.exit(1)
