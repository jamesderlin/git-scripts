#!/usr/bin/env python3

"""
Prints whether one Git commit is included by (is an ancestor of) another.

If the specified commit is not an ancestor, nothing is printed, and the command
exits with a status of 1.
"""

import optparse
import sys

import gitutils


@gitutils.entrypoint
def main(argv):
    parser = optparse.OptionParser(
        description=__doc__.strip(),
        usage="%prog [OPTIONS] [--leaf=COMMIT] COMMIT",
        add_help_option=False,
    )
    parser.disable_interspersed_args()

    parser.add_option("-h", "--help", action="store_true",
                      help="Show this help message and exit.")
    parser.add_option("--verbose", action="store_true",
                      help="Print verbose debugging messages.")
    parser.add_option("--leaf", default="HEAD",
                      help="The descendant commit-ish.  Defaults to `HEAD`.")

    (opts, args) = parser.parse_args(argv[1:])

    if opts.help:
        parser.print_help()
        print("\n"
              "Positional arguments:\n"
              "  COMMIT  The ancestor commit-ish.")
        return 0

    gitutils.expect_positional_args(parser, args, min=1, max=1)
    commitish = args.pop(0)

    gitutils.verbose = opts.verbose

    if not gitutils.is_git_ancestor(commitish, opts.leaf):
        return 1

    commit = gitutils.git_commit_hash(commitish, short=True)
    commit = (f"{commitish} ({commit})"
              if commit != commitish
              else commitish)

    leaf = gitutils.git_commit_hash(opts.leaf, short=True)
    leaf = (f"{opts.leaf} ({leaf})"
            if leaf != opts.leaf
            else opts.leaf)
    print(f"{leaf} has commit {commit}.")

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
