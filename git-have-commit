#!/usr/bin/env python3

"""
Prints whether one Git commit is included by (is an ancestor of) another.

If the specified commit is not an ancestor, nothing is printed, and the command
exits with a status of 1.
"""

import argparse
import sys

import gitutils


@gitutils.entrypoint(globals())
def main(argv):
    ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--verbose", action="store_true",
                    help="Print verbose debugging messages.")
    ap.add_argument("--leaf", default="HEAD",
                    help="The descendant commit-ish.  Defaults to `HEAD`.")
    ap.add_argument("commit", metavar="COMMIT",
                    help="The ancestor commit-ish.")

    args = ap.parse_args(argv[1:])

    if not gitutils.is_git_ancestor(args.commit, args.leaf):
        return 1

    commit = gitutils.git_commit_hash(args.commit, short=True)
    commit = (f"{args.commit} ({commit})"
              if commit[0:4] != args.commit[0:4]
              else args.commit)

    leaf = gitutils.git_commit_hash(args.leaf, short=True)
    leaf = (f"{args.leaf} ({leaf})"
            if leaf[0:4] != args.leaf[0:4]
            else args.leaf)
    print(f"{leaf} has commit {commit}.")

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
