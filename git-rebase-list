#!/usr/bin/env python3

"""Rebases a list of branches onto a new parent."""

import argparse
import subprocess
import sys

import gitutils


@gitutils.entrypoint
def main(argv):
    ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--verbose", action="store_true",
                    help="Print verbose debugging messages.")
    ap.add_argument("--dest", default="HEAD",
                    help="The destination commit.  This will become the new "
                         "parent commit of the rebased branches.  Defaults "
                         "to `HEAD`.")
    ap.add_argument("branches", metavar="BRANCH", nargs="+",
                    help="A branch to rebase.  If `-`, branch names will "
                         "be read from stdin.")

    args = ap.parse_args(argv[1:])

    gitutils.verbose = args.verbose

    dest = gitutils.git_commit_hash(args.dest)

    # Remove duplicate branch names while preserving order.  Python has no
    # ordered set type, so store them in a `dict`, which is guaranteed to
    # preserve order in Python 3.7 or later.
    branches = {}
    for i in args.branches:
        if i != "-":
            branches[i] = None
        else:
            for line in sys.stdin:
                branches[line.strip()] = None

    failed_branches = []
    for branch in branches.keys():
        try:
            gitutils.git_commit_hash(branch)
        except gitutils.CommitNotFoundError as e:
            print(f"{__name__}: {e}", file=sys.stderr)
            failed_branches.append(branch)
            continue

        command = ("git", "rebase", "--update-refs", "--onto", dest, "--", branch)
        print(f"Rebasing {branch} onto {dest} ...")
        result = gitutils.run_command(command)

        if result.returncode != 0:
            failed_branches.append(branch)
            gitutils.run_command(("git", "rebase", "--abort"),
                                 stdout=subprocess.DEVNULL,
                                 stderr=subprocess.DEVNULL)

    if not failed_branches:
        return 0

    print("\n"
          "Failed to rebase:", file=sys.stderr)
    for branch in failed_branches:
        print(f"  {branch}", file=sys.stderr)
    return 1


if __name__ == "__main__":
    sys.exit(main(sys.argv))
