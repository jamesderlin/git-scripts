#!/usr/bin/env python3

"""Attaches a detached Git head to a local branch."""

import optparse
import sys

import gitutils


@gitutils.entrypoint
def main(argv):
    parser = optparse.OptionParser(
        description=__doc__.strip(),
        usage="%prog [OPTIONS]",
        add_help_option=False,
    )
    parser.disable_interspersed_args()

    parser.add_option("-h", "--help", action="help",
                      help="Show this help message and exit.")
    parser.add_option("--verbose", action="store_true",
                      help="Print verbose debugging messages.")

    (opts, args) = parser.parse_args(argv[1:])
    gitutils.expect_positional_args(parser, args, max=0)

    gitutils.verbose = opts.verbose

    current_branch = gitutils.current_git_branch()
    if current_branch != "HEAD":
        print(f"{__name__}: Already on branch: {current_branch}")
        return 0

    local_branches = gitutils.git_names_for("HEAD")
    if not local_branches:
        commit_hash = gitutils.git_commit_hash("HEAD", short=True)
        raise gitutils.AbortError(f"No local branches are associated with "
                                  f"{commit_hash}")

    if len(local_branches) == 1:
        selected_branch = local_branches[0]
    else:
        selected_branch = gitutils.prompt_for_branch(local_branches, "HEAD")

    command = ("git", "checkout", selected_branch)
    return gitutils.run_command(command).returncode


if __name__ == "__main__":
    sys.exit(main(sys.argv))
