#!/usr/bin/env python3

"""
Moves a lightweight tag to a different commit.
"""

import argparse
import subprocess
import sys

import gitutils


@gitutils.entrypoint
def main(argv):
    ap = argparse.ArgumentParser(description=__doc__.strip(), add_help=False)
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--verbose", action="store_true",
                    help="Print verbose debugging messages.")
    ap.add_argument("tag", metavar="TAG",
                    help="The name of the tag to move.")
    ap.add_argument("dest", metavar="COMMIT", nargs="?", default="HEAD",
                    help="The commit to move the tag to.  "
                         "Defaults to `HEAD`.")

    args = ap.parse_args(argv[1:])

    gitutils.verbose = args.verbose

    src_hash = gitutils.git_commit_hash(args.tag, short=True)
    dest_hash = gitutils.git_commit_hash(args.dest, short=True)

    if src_hash == dest_hash:
        print(f"Tag \"{args.tag}\" is already at {dest_hash}",
              file=sys.stderr)
        return 0

    result = gitutils.run_command(("git", "tag", "-d", args.tag),
                                  stdout=subprocess.DEVNULL)
    if result.returncode != 0:
        return result.returncode

    result = gitutils.run_command(("git", "tag", args.tag, dest_hash))
    if result.returncode != 0:
        # Try to add the tag back to the original commit.
        temp_result = gitutils.run_command(("git", "tag", args.tag, src_hash))
        if temp_result.returncode != 0:
            raise gitutils.AbortError(f"Failed to restore tag \"{args.tag}\" "
                                      f"to commit {src_hash}",
                                      exit_code=result.returncode)
        return result.returncode

    print(f"Moved tag \"{args.tag}\" from {src_hash} => {dest_hash}")
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
