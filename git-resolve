#!/usr/bin/env python3

"""
Interactively manages and resolves merge conflicts.

Unlike `git mergetool`, opens conflicting files in a text editor instead of in
a graphical merge tool.  Additionally will never automatically add files that
still contain conflict markers.
"""

# TODO:
# * Add option to mark files with conflict markers as unresolved.
#   <https://stackoverflow.com/questions/2780483/>
# * Add option to re-resolve resolved conflicts.
# * Add options to automatically resolve conflicts with ours or theirs.

import enum
import optparse
import os
import re
import subprocess
import sys

import gitutils


conflict_marker_re = re.compile(r"(?:[<]{7})"  # Yours
                                r"|(?:[|]{7})"  # Original
                                r"|(?:[=]{7})"  # Theirs
                                r"|(?:[>]{7})")  # End


def find_conflict_marker(file_path):
    """
    Returns the line number of the first line that contains a merge conflict
    marker the specified file.

    Lines are numbered starting from 1.
    """
    with open(file_path) as f:
        for (line_number, line) in enumerate(f, 1):
            if conflict_marker_re.match(line):
                return line_number
    return None


class ConflictState(enum.Enum):
    """See `handle_conflicts`."""
    NONE = enum.auto()
    RESOLVED = enum.auto()
    UNRESOLVED = enum.auto()


def handle_conflicts(file_path):
    """
    Prompts to resolve conflicts in the specified file.

    Returns `ConflictState.NONE` if no conflicts were detected in the file,
    `ConflictState.RESOLVED` if all conflicts were resolved, and
    `ConflictState.unresolved` if conflicts remain unresolved.

    Might raise `AbortError` to cancel resolving all remaining conflicts.
    """
    result = ConflictState.NONE
    choices = (("e", "edit"), ("s", "skip"), ("q", "quit"))
    prompt = "(E)dit, (s)kip, (q)uit: "
    while True:
        line_number = find_conflict_marker(file_path)
        if line_number is None:
            if result == ConflictState.UNRESOLVED:
                result = ConflictState.RESOLVED
            print(f"Resolved: {file_path}")
            gitutils.run_command(("git", "add", "--", file_path), check=True)
            break

        print(f"Conflicts in: {file_path}")
        result = ConflictState.UNRESOLVED

        response = gitutils.prompt_with_choices(prompt, choices, default="e")
        if response is None or response == "q":
            raise gitutils.AbortError(cancelled=True)

        if response == "e":
            gitutils.run_editor(file_path, line_number=line_number)
        elif response == "s":
            return result
        else:
            assert False

    return result


class ConflictChecker:
    """Checks results from `git status` to find and to resolve conflicts."""
    def __init__(self, check_all_files):
        self.conflict_summary = ConflictState.NONE
        self._check_all_files = check_all_files

    def check(self, status_dict):
        """Checks the entries from `git status`."""
        for (file_path, file_info) in status_dict.items():
            self._process_status_entry(file_path, file_info)

    def _process_status_entry(self, file_path, file_info):
        """Processes the next entry parsed from `git status`."""
        code = file_info.code_index + file_info.code_working_tree

        # TODO: Provide resolution options for the other conflict types.
        if code == "AA":
            print(f"Conflicts in: {file_path} (added by both)")
            self.conflict_summary = ConflictState.UNRESOLVED
        elif code == "AU":
            print(f"Conflicts in: {file_path} (added by us)")
            self._update_conflict_summary(ConflictState.UNRESOLVED)
        elif code == "UA":
            print(f"Conflicts in: {file_path} (added by them)")
            self._update_conflict_summary(ConflictState.UNRESOLVED)
        elif code == "DD":
            print(f"Conflicts in: {file_path} (deleted by both)")
            self._resolve_delete(file_path)
        elif code == "DU":
            print(f"Conflicts in: {file_path} (deleted by us)")
            self._resolve_delete(file_path)
        elif code == "UD":
            print(f"Conflicts in: {file_path} (deleted by them)")
            self._resolve_delete(file_path)
        elif (code == "UU"
              or (self._check_all_files and os.path.isfile(file_path))):
            file_state = handle_conflicts(file_path)
            self._update_conflict_summary(file_state)

    def _resolve_delete(self, file_path):
        """
        Prompts to delete the conflicting file to resolve deletion conflicts.

        Usually if the file was deleted, regardless of who deleted it, we'd
        want it to stay deleted.
        """
        response = gitutils.prompt_with_choices(
            f"Delete `{file_path}`? (Y/n) ",
            (("y", "yes"),
             ("n", "no")),
            default="y")
        if response == "y":
            gitutils.run_command(("git", "rm", "--quiet", "--", file_path),
                                 stdout=subprocess.DEVNULL)
            self._update_conflict_summary(ConflictState.RESOLVED)
        else:
            self._update_conflict_summary(ConflictState.UNRESOLVED)

    def _update_conflict_summary(self, file_state):
        """
        Updates the current `ConflictState` summary by combining it with the
        `ConflictState` from a single file.

        Allowed state transitions for `conflict_summary`:

        ---> NONE ---> RESOLVED ---> UNRESOLVED <---+
              |           |                         |
              +-----------+-------------------------+
        """
        if file_state == ConflictState.NONE:
            pass
        elif file_state == ConflictState.RESOLVED:
            if self.conflict_summary == ConflictState.NONE:
                self.conflict_summary = ConflictState.RESOLVED
        elif file_state == ConflictState.UNRESOLVED:
            self.conflict_summary = ConflictState.UNRESOLVED
        else:
            assert False


@gitutils.entrypoint
def main(argv):
    parser = optparse.OptionParser(
        description=__doc__.strip(),
        usage="%prog [OPTIONS]",
        add_help_option=False,
    )
    parser.disable_interspersed_args()

    parser.add_option("-h", "--help", action="help",
                      help="Show this help message and exit.")
    parser.add_option("--verbose", action="store_true",
                      help="Print verbose debugging messages.")
    parser.add_option("--all", action="store_true",
                      help="Check for conflict markers in all files awaiting "
                           "commit, not just unmerged files.")

    (opts, args) = parser.parse_args(argv[1:])
    gitutils.expect_positional_args(parser, args, max=0)

    gitutils.verbose = opts.verbose

    checker = ConflictChecker(opts.all)
    checker.check(gitutils.git_status())
    if checker.conflict_summary == ConflictState.NONE:
        print("No conflicts detected.")
        return 0

    return 0 if checker.conflict_summary == ConflictState.RESOLVED else 1


if __name__ == "__main__":
    sys.exit(main(sys.argv))
