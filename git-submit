#!/usr/bin/env python3

"""
A wrapper around `git commit` that prevents (perhaps accidentally) committing
a mixture of staged and unstaged changes.
"""

import optparse
import shlex
import sys

import gitutils


@gitutils.entrypoint
def main(argv):
    parser = optparse.OptionParser(
        description=__doc__.strip(),
        usage="%prog [OPTIONS] [--] [PATH...]",
        add_help_option=False,
    )
    parser.disable_interspersed_args()

    parser.add_option("-h", "--help", action="help",
                      help="Show this help message and exit.")
    parser.add_option("--verbose", action="store_true",
                      help="Print verbose debugging messages.")
    parser.add_option("--auto", action="store_true",
                      help="Automatic mode.  If any staged changes exist, "
                           "commits only the staged changes.  Otherwise "
                           "commits all unstaged changes.  This can be "
                           "enabled by default by setting the `submit.auto` "
                           "configuration variable to `true`.  Ignored if "
                           "`-a`/`--all` is supplied.")

    passthrough_options = {
        ("-p", "--patch"): None,
        ("-C", "--reuse-message"): "COMMIT",
        ("-c", "--reedit-message"): "COMMIT",
        ("--fixup",): "COMMIT",
        ("--squash",): "COMMIT",
        ("--reset-author",): None,
        ("--short",): None,
        ("--branch",): None,
        ("--long",): None,
        ("-F", "--file"): "FILE",
        ("--author",): "AUTHOR",
        ("--date",): "DATE",
        ("-m", "--message"): "MESSAGE",
        ("-t", "--template"): "FILE",
        ("--cleanup",): "MODE",
        ("-e", "--edit"): None,
        ("--no-edit",): None,
        ("--amend",): None,
        ("--pathspec-from-file",): "FILE",
        ("-q", "--quiet"): None,
    }

    passthrough_group = optparse.OptionGroup(
        parser,
        "Options passed through to `git commit`",
        "(See `git help commit` for details about these options.)",
    )

    passthrough_group.add_option("-a", "--all", action="store_true")
    gitutils.add_passthrough_options(passthrough_group, passthrough_options,
                                     dest="commit_options")
    parser.add_option_group(passthrough_group)

    (opts, args) = parser.parse_args(argv[1:])

    gitutils.verbose = opts.verbose
    if opts.verbose:
        opts.commit_options.append("--verbose")

    auto = gitutils.get_option(opts, "auto", handler=bool, default=False)

    if auto or opts.all:
        status_dict = gitutils.git_status()

        has_staged_files = False
        has_unstaged_files = False
        for (file_path, code) in status_dict.items():
            (staged_code, unstaged_code) = code
            if staged_code != " ":
                has_staged_files = True
            if unstaged_code != " ":
                has_unstaged_files = True

        if opts.all and has_staged_files and has_unstaged_files:
            print(f"{__name__}: Aborting commit because staged and unstaged "
                  f"changes were detected.",
                file=sys.stderr)
            return 1

        if auto:
            opts.all = not has_staged_files

    if opts.all:
        opts.commit_options.append("--all")

    command = ("git", "commit", *opts.commit_options, "--", *args)
    return gitutils.run_command(command).returncode


if __name__ == "__main__":
    sys.exit(main(sys.argv))
