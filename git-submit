#!/usr/bin/env python3

"""
A wrapper around `git commit` that prompts when (perhaps accidentally)
attempting to commit a mixture of staged and unstaged changes.
"""

import optparse
import sys

import gitutils


@gitutils.entrypoint
def main(argv):
    parser = optparse.OptionParser(
        description=__doc__.strip(),
        usage="%prog [OPTIONS] [--] [PATH...]",
        add_help_option=False,
    )
    parser.disable_interspersed_args()

    parser.add_option("-h", "--help", action="help",
                      help="Show this help message and exit.")
    parser.add_option("--verbose", action="store_true",
                      help="Print verbose debugging messages.")
    parser.add_option("-a", "--all", action="store_true",
                      help="Consider all (both staged and unstaged) "
                           "changes.  This can be enabled by default by "
                           "setting the `submit.all` configuration variable "
                           "to `true`.")
    parser.add_option("--amend", action="store_true",
                      help="Update (replace) the current commit.")
    parser.add_option("--dry-run", action="store_true",
                      help=optparse.SUPPRESS_HELP)

    passthrough_options = {
        ("-p", "--patch"): None,
        ("-C", "--reuse-message"): "COMMIT",
        ("-c", "--reedit-message"): "COMMIT",
        ("--fixup",): "COMMIT",
        ("--squash",): "COMMIT",
        ("--reset-author",): None,
        ("--short",): None,
        ("--branch",): None,
        ("--long",): None,
        ("-F", "--file"): "FILE",
        ("--author",): "AUTHOR",
        ("--date",): "DATE",
        ("-m", "--message"): "MESSAGE",
        ("-t", "--template"): "FILE",
        ("--cleanup",): "MODE",
        ("-e", "--edit"): None,
        ("--no-edit",): None,
        ("--pathspec-from-file",): "FILE",
        ("-q", "--quiet"): None,
    }

    passthrough_group = optparse.OptionGroup(
        parser,
        "Options passed through to `git commit`",
        "(See `git help commit` for details about these options.)",
    )

    gitutils.add_passthrough_options(passthrough_group, passthrough_options,
                                     dest="commit_options")
    parser.add_option_group(passthrough_group)

    (opts, args) = parser.parse_args(argv[1:])

    gitutils.verbose = opts.verbose
    if opts.verbose:
        opts.commit_options.append("--verbose")

    opts.all = gitutils.get_option(opts, "all", handler=bool, default=False)

    # Options | Types of changes  |
    # --------+----------+--------+
    #   all   | unstaged | staged | Desired behavior
    # --------+----------+--------+--------------------
    #         |          |        | Submit nothing
    #    X    |          |        | Submit nothing
    # --------+----------+--------+--------------------
    #         |    X     |        | Submit unstaged/all
    #    X    |    X     |        | Submit unstaged/all
    # --------+----------+--------+--------------------
    #         |          |   X    | Submit staged/all
    #    X    |          |   X    | Submit staged/all
    # --------+----------+--------+--------------------
    #         |    X     |   X    | Submit staged
    #    X    |    X     |   X    | Prompt

    status_dict = gitutils.git_status()

    staged_files = []
    unstaged_files = []
    for (_file_path, file_info) in status_dict.items():
        if file_info.code_index != " ":
            staged_files.append(file_info.file_path)
        if file_info.code_working_tree != " ":
            unstaged_files.append(file_info.file_path)

    if opts.all:
        # Avoid unintentionally adding unstaged changes if someone wants to
        # just amend a commit message.
        if opts.amend and unstaged_files and not staged_files:
            summary = gitutils.summarize_git_commit("HEAD")
            print(f"Amending:\n"
                  f"  {summary}\n"
                  f"\n"
                  f"Unstaged files detected:")
            for path in unstaged_files:
                print(f"  {path}")
            print()

            response = gitutils.prompt_with_choices(
                "M: Edit commit message only (default)\n"
                "U: Amend with all unstaged changes\n"
                "Q: Quit\n"
                "\n"
                "How do you want to amend? (M/u/q) ",
                (("m", "message"), ("u", "unstaged"), ("q", "quit")),
                default="m",
            )
            if response is None or response == "q":
                return 1

            opts.all = response == "u"
        elif staged_files and unstaged_files:
            print("Both staged and unstaged changes detected.")
            response = gitutils.prompt_with_choices(
                "Submit: (S)taged, (a)ll, (q)uit: ",
                (("s", "staged"), ("a", "all"), ("q", "quit")),
                default="s",
            )
            if response is None or response == "q":
                return 1

            opts.all = response == "a"

    if opts.all:
        opts.commit_options.append("--all")
    if opts.amend:
        opts.commit_options.append("--amend")

    command = ("git", "commit", *opts.commit_options, "--", *args)
    if opts.dry_run:
        print(command)
        return 0

    return gitutils.run_command(command).returncode


if __name__ == "__main__":
    sys.exit(main(sys.argv))
